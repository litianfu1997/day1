package com.nnxy.entity;

import com.nnxy.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.nnxy.dao.AccountDao;
import com.nnxy.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ACCOUNT".
 */
public class Account {

    private Long acc_id;
    /** Not-null value. */
    private String address;
    /** Not-null value. */
    private String date;
    private double money;
    /** Not-null value. */
    private String zw_leibie;
    /** Not-null value. */
    private String leibie;
    /** Not-null value. */
    private String note;
    private Long user_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AccountDao myDao;

    private User user;
    private Long user__resolvedKey;


    public Account() {
    }

    public Account(Long acc_id) {
        this.acc_id = acc_id;
    }

    public Account(Long acc_id, String address, String date, double money, String zw_leibie, String leibie, String note, Long user_id) {
        this.acc_id = acc_id;
        this.address = address;
        this.date = date;
        this.money = money;
        this.zw_leibie = zw_leibie;
        this.leibie = leibie;
        this.note = note;
        this.user_id = user_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAccountDao() : null;
    }

    public Long getAcc_id() {
        return acc_id;
    }

    public void setAcc_id(Long acc_id) {
        this.acc_id = acc_id;
    }

    /** Not-null value. */
    public String getAddress() {
        return address;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAddress(String address) {
        this.address = address;
    }

    /** Not-null value. */
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(String date) {
        this.date = date;
    }

    public double getMoney() {
        return money;
    }

    public void setMoney(double money) {
        this.money = money;
    }

    /** Not-null value. */
    public String getZw_leibie() {
        return zw_leibie;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setZw_leibie(String zw_leibie) {
        this.zw_leibie = zw_leibie;
    }

    /** Not-null value. */
    public String getLeibie() {
        return leibie;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLeibie(String leibie) {
        this.leibie = leibie;
    }

    /** Not-null value. */
    public String getNote() {
        return note;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNote(String note) {
        this.note = note;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.user_id;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            user_id = user == null ? null : user.getUser_id();
            user__resolvedKey = user_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
